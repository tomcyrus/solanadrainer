/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CartItem as PrismaCartItem,
  User as PrismaUser,
  Product as PrismaProduct,
} from "@prisma/client";

export class CartItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CartItemCountArgs, "select">): Promise<number> {
    return this.prisma.cartItem.count(args);
  }

  async cartItems(
    args: Prisma.CartItemFindManyArgs
  ): Promise<PrismaCartItem[]> {
    return this.prisma.cartItem.findMany(args);
  }
  async cartItem(
    args: Prisma.CartItemFindUniqueArgs
  ): Promise<PrismaCartItem | null> {
    return this.prisma.cartItem.findUnique(args);
  }
  async createCartItem(
    args: Prisma.CartItemCreateArgs
  ): Promise<PrismaCartItem> {
    return this.prisma.cartItem.create(args);
  }
  async updateCartItem(
    args: Prisma.CartItemUpdateArgs
  ): Promise<PrismaCartItem> {
    return this.prisma.cartItem.update(args);
  }
  async deleteCartItem(
    args: Prisma.CartItemDeleteArgs
  ): Promise<PrismaCartItem> {
    return this.prisma.cartItem.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.cartItem
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.cartItem
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
