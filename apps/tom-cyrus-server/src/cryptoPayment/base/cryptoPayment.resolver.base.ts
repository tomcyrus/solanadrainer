/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CryptoPayment } from "./CryptoPayment";
import { CryptoPaymentCountArgs } from "./CryptoPaymentCountArgs";
import { CryptoPaymentFindManyArgs } from "./CryptoPaymentFindManyArgs";
import { CryptoPaymentFindUniqueArgs } from "./CryptoPaymentFindUniqueArgs";
import { CreateCryptoPaymentArgs } from "./CreateCryptoPaymentArgs";
import { UpdateCryptoPaymentArgs } from "./UpdateCryptoPaymentArgs";
import { DeleteCryptoPaymentArgs } from "./DeleteCryptoPaymentArgs";
import { CryptoPaymentService } from "../cryptoPayment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CryptoPayment)
export class CryptoPaymentResolverBase {
  constructor(
    protected readonly service: CryptoPaymentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CryptoPayment",
    action: "read",
    possession: "any",
  })
  async _cryptoPaymentsMeta(
    @graphql.Args() args: CryptoPaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CryptoPayment])
  @nestAccessControl.UseRoles({
    resource: "CryptoPayment",
    action: "read",
    possession: "any",
  })
  async cryptoPayments(
    @graphql.Args() args: CryptoPaymentFindManyArgs
  ): Promise<CryptoPayment[]> {
    return this.service.cryptoPayments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CryptoPayment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CryptoPayment",
    action: "read",
    possession: "own",
  })
  async cryptoPayment(
    @graphql.Args() args: CryptoPaymentFindUniqueArgs
  ): Promise<CryptoPayment | null> {
    const result = await this.service.cryptoPayment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CryptoPayment)
  @nestAccessControl.UseRoles({
    resource: "CryptoPayment",
    action: "create",
    possession: "any",
  })
  async createCryptoPayment(
    @graphql.Args() args: CreateCryptoPaymentArgs
  ): Promise<CryptoPayment> {
    return await this.service.createCryptoPayment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CryptoPayment)
  @nestAccessControl.UseRoles({
    resource: "CryptoPayment",
    action: "update",
    possession: "any",
  })
  async updateCryptoPayment(
    @graphql.Args() args: UpdateCryptoPaymentArgs
  ): Promise<CryptoPayment | null> {
    try {
      return await this.service.updateCryptoPayment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CryptoPayment)
  @nestAccessControl.UseRoles({
    resource: "CryptoPayment",
    action: "delete",
    possession: "any",
  })
  async deleteCryptoPayment(
    @graphql.Args() args: DeleteCryptoPaymentArgs
  ): Promise<CryptoPayment | null> {
    try {
      return await this.service.deleteCryptoPayment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
