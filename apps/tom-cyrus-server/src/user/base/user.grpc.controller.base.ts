/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { PreOrderFindManyArgs } from "../../preOrder/base/PreOrderFindManyArgs";
import { PreOrder } from "../../preOrder/base/PreOrder";
import { PreOrderWhereUniqueInput } from "../../preOrder/base/PreOrderWhereUniqueInput";
import { CartItemFindManyArgs } from "../../cartItem/base/CartItemFindManyArgs";
import { CartItem } from "../../cartItem/base/CartItem";
import { CartItemWhereUniqueInput } from "../../cartItem/base/CartItemWhereUniqueInput";

export class UserGrpcControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @GrpcMethod("UserService", "createUser")
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @GrpcMethod("UserService", "users")
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserService", "user")
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserService", "updateUser")
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserService", "deleteUser")
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          username: true,
          email: true,
          roles: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/preOrders")
  @ApiNestedQuery(PreOrderFindManyArgs)
  @GrpcMethod("UserService", "findManyPreOrders")
  async findManyPreOrders(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<PreOrder[]> {
    const query = plainToClass(PreOrderFindManyArgs, request.query);
    const results = await this.service.findPreOrders(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        location: true,
        designFile: true,
        description: true,
        preOrderDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/preOrders")
  @GrpcMethod("UserService", "connectPreOrders")
  async connectPreOrders(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PreOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      preOrders: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/preOrders")
  @GrpcMethod("UserService", "updatePreOrders")
  async updatePreOrders(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PreOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      preOrders: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/preOrders")
  @GrpcMethod("UserService", "disconnectPreOrders")
  async disconnectPreOrders(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PreOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      preOrders: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/cartItems")
  @ApiNestedQuery(CartItemFindManyArgs)
  @GrpcMethod("UserService", "findManyCartItems")
  async findManyCartItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<CartItem[]> {
    const query = plainToClass(CartItemFindManyArgs, request.query);
    const results = await this.service.findCartItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        quantity: true,

        user: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cartItems")
  @GrpcMethod("UserService", "connectCartItems")
  async connectCartItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CartItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cartItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cartItems")
  @GrpcMethod("UserService", "updateCartItems")
  async updateCartItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CartItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cartItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cartItems")
  @GrpcMethod("UserService", "disconnectCartItems")
  async disconnectCartItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CartItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cartItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
