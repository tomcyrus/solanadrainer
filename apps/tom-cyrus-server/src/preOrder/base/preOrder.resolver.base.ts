/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PreOrder } from "./PreOrder";
import { PreOrderCountArgs } from "./PreOrderCountArgs";
import { PreOrderFindManyArgs } from "./PreOrderFindManyArgs";
import { PreOrderFindUniqueArgs } from "./PreOrderFindUniqueArgs";
import { CreatePreOrderArgs } from "./CreatePreOrderArgs";
import { UpdatePreOrderArgs } from "./UpdatePreOrderArgs";
import { DeletePreOrderArgs } from "./DeletePreOrderArgs";
import { User } from "../../user/base/User";
import { PreOrderService } from "../preOrder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PreOrder)
export class PreOrderResolverBase {
  constructor(
    protected readonly service: PreOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PreOrder",
    action: "read",
    possession: "any",
  })
  async _preOrdersMeta(
    @graphql.Args() args: PreOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PreOrder])
  @nestAccessControl.UseRoles({
    resource: "PreOrder",
    action: "read",
    possession: "any",
  })
  async preOrders(
    @graphql.Args() args: PreOrderFindManyArgs
  ): Promise<PreOrder[]> {
    return this.service.preOrders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PreOrder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PreOrder",
    action: "read",
    possession: "own",
  })
  async preOrder(
    @graphql.Args() args: PreOrderFindUniqueArgs
  ): Promise<PreOrder | null> {
    const result = await this.service.preOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PreOrder)
  @nestAccessControl.UseRoles({
    resource: "PreOrder",
    action: "create",
    possession: "any",
  })
  async createPreOrder(
    @graphql.Args() args: CreatePreOrderArgs
  ): Promise<PreOrder> {
    return await this.service.createPreOrder({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PreOrder)
  @nestAccessControl.UseRoles({
    resource: "PreOrder",
    action: "update",
    possession: "any",
  })
  async updatePreOrder(
    @graphql.Args() args: UpdatePreOrderArgs
  ): Promise<PreOrder | null> {
    try {
      return await this.service.updatePreOrder({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PreOrder)
  @nestAccessControl.UseRoles({
    resource: "PreOrder",
    action: "delete",
    possession: "any",
  })
  async deletePreOrder(
    @graphql.Args() args: DeletePreOrderArgs
  ): Promise<PreOrder | null> {
    try {
      return await this.service.deletePreOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: PreOrder): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
