/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PreOrderService } from "../preOrder.service";
import { PreOrderCreateInput } from "./PreOrderCreateInput";
import { PreOrderWhereInput } from "./PreOrderWhereInput";
import { PreOrderWhereUniqueInput } from "./PreOrderWhereUniqueInput";
import { PreOrderFindManyArgs } from "./PreOrderFindManyArgs";
import { PreOrderUpdateInput } from "./PreOrderUpdateInput";
import { PreOrder } from "./PreOrder";

export class PreOrderGrpcControllerBase {
  constructor(protected readonly service: PreOrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PreOrder })
  @GrpcMethod("PreOrderService", "createPreOrder")
  async createPreOrder(
    @common.Body() data: PreOrderCreateInput
  ): Promise<PreOrder> {
    return await this.service.createPreOrder({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        location: true,
        designFile: true,
        description: true,
        preOrderDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PreOrder] })
  @ApiNestedQuery(PreOrderFindManyArgs)
  @GrpcMethod("PreOrderService", "preOrders")
  async preOrders(@common.Req() request: Request): Promise<PreOrder[]> {
    const args = plainToClass(PreOrderFindManyArgs, request.query);
    return this.service.preOrders({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        location: true,
        designFile: true,
        description: true,
        preOrderDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PreOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PreOrderService", "preOrder")
  async preOrder(
    @common.Param() params: PreOrderWhereUniqueInput
  ): Promise<PreOrder | null> {
    const result = await this.service.preOrder({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        location: true,
        designFile: true,
        description: true,
        preOrderDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PreOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PreOrderService", "updatePreOrder")
  async updatePreOrder(
    @common.Param() params: PreOrderWhereUniqueInput,
    @common.Body() data: PreOrderUpdateInput
  ): Promise<PreOrder | null> {
    try {
      return await this.service.updatePreOrder({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          location: true,
          designFile: true,
          description: true,
          preOrderDate: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PreOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PreOrderService", "deletePreOrder")
  async deletePreOrder(
    @common.Param() params: PreOrderWhereUniqueInput
  ): Promise<PreOrder | null> {
    try {
      return await this.service.deletePreOrder({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          location: true,
          designFile: true,
          description: true,
          preOrderDate: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
