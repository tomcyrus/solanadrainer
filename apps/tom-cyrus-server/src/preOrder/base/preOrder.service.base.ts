/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PreOrder as PrismaPreOrder,
  User as PrismaUser,
} from "@prisma/client";

export class PreOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PreOrderCountArgs, "select">): Promise<number> {
    return this.prisma.preOrder.count(args);
  }

  async preOrders(
    args: Prisma.PreOrderFindManyArgs
  ): Promise<PrismaPreOrder[]> {
    return this.prisma.preOrder.findMany(args);
  }
  async preOrder(
    args: Prisma.PreOrderFindUniqueArgs
  ): Promise<PrismaPreOrder | null> {
    return this.prisma.preOrder.findUnique(args);
  }
  async createPreOrder(
    args: Prisma.PreOrderCreateArgs
  ): Promise<PrismaPreOrder> {
    return this.prisma.preOrder.create(args);
  }
  async updatePreOrder(
    args: Prisma.PreOrderUpdateArgs
  ): Promise<PrismaPreOrder> {
    return this.prisma.preOrder.update(args);
  }
  async deletePreOrder(
    args: Prisma.PreOrderDeleteArgs
  ): Promise<PrismaPreOrder> {
    return this.prisma.preOrder.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.preOrder
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
