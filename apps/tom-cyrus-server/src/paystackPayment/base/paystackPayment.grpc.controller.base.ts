/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PaystackPaymentService } from "../paystackPayment.service";
import { PaystackPaymentCreateInput } from "./PaystackPaymentCreateInput";
import { PaystackPaymentWhereInput } from "./PaystackPaymentWhereInput";
import { PaystackPaymentWhereUniqueInput } from "./PaystackPaymentWhereUniqueInput";
import { PaystackPaymentFindManyArgs } from "./PaystackPaymentFindManyArgs";
import { PaystackPaymentUpdateInput } from "./PaystackPaymentUpdateInput";
import { PaystackPayment } from "./PaystackPayment";

export class PaystackPaymentGrpcControllerBase {
  constructor(protected readonly service: PaystackPaymentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaystackPayment })
  @GrpcMethod("PaystackPaymentService", "createPaystackPayment")
  async createPaystackPayment(
    @common.Body() data: PaystackPaymentCreateInput
  ): Promise<PaystackPayment> {
    return await this.service.createPaystackPayment({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reference: true,
        amount: true,
        paymentDate: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaystackPayment] })
  @ApiNestedQuery(PaystackPaymentFindManyArgs)
  @GrpcMethod("PaystackPaymentService", "paystackPayments")
  async paystackPayments(
    @common.Req() request: Request
  ): Promise<PaystackPayment[]> {
    const args = plainToClass(PaystackPaymentFindManyArgs, request.query);
    return this.service.paystackPayments({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reference: true,
        amount: true,
        paymentDate: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaystackPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PaystackPaymentService", "paystackPayment")
  async paystackPayment(
    @common.Param() params: PaystackPaymentWhereUniqueInput
  ): Promise<PaystackPayment | null> {
    const result = await this.service.paystackPayment({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reference: true,
        amount: true,
        paymentDate: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaystackPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PaystackPaymentService", "updatePaystackPayment")
  async updatePaystackPayment(
    @common.Param() params: PaystackPaymentWhereUniqueInput,
    @common.Body() data: PaystackPaymentUpdateInput
  ): Promise<PaystackPayment | null> {
    try {
      return await this.service.updatePaystackPayment({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          reference: true,
          amount: true,
          paymentDate: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaystackPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PaystackPaymentService", "deletePaystackPayment")
  async deletePaystackPayment(
    @common.Param() params: PaystackPaymentWhereUniqueInput
  ): Promise<PaystackPayment | null> {
    try {
      return await this.service.deletePaystackPayment({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          reference: true,
          amount: true,
          paymentDate: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
