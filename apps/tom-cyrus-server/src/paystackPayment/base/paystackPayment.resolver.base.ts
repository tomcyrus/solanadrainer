/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PaystackPayment } from "./PaystackPayment";
import { PaystackPaymentCountArgs } from "./PaystackPaymentCountArgs";
import { PaystackPaymentFindManyArgs } from "./PaystackPaymentFindManyArgs";
import { PaystackPaymentFindUniqueArgs } from "./PaystackPaymentFindUniqueArgs";
import { CreatePaystackPaymentArgs } from "./CreatePaystackPaymentArgs";
import { UpdatePaystackPaymentArgs } from "./UpdatePaystackPaymentArgs";
import { DeletePaystackPaymentArgs } from "./DeletePaystackPaymentArgs";
import { PaystackPaymentService } from "../paystackPayment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaystackPayment)
export class PaystackPaymentResolverBase {
  constructor(
    protected readonly service: PaystackPaymentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaystackPayment",
    action: "read",
    possession: "any",
  })
  async _paystackPaymentsMeta(
    @graphql.Args() args: PaystackPaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaystackPayment])
  @nestAccessControl.UseRoles({
    resource: "PaystackPayment",
    action: "read",
    possession: "any",
  })
  async paystackPayments(
    @graphql.Args() args: PaystackPaymentFindManyArgs
  ): Promise<PaystackPayment[]> {
    return this.service.paystackPayments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaystackPayment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaystackPayment",
    action: "read",
    possession: "own",
  })
  async paystackPayment(
    @graphql.Args() args: PaystackPaymentFindUniqueArgs
  ): Promise<PaystackPayment | null> {
    const result = await this.service.paystackPayment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaystackPayment)
  @nestAccessControl.UseRoles({
    resource: "PaystackPayment",
    action: "create",
    possession: "any",
  })
  async createPaystackPayment(
    @graphql.Args() args: CreatePaystackPaymentArgs
  ): Promise<PaystackPayment> {
    return await this.service.createPaystackPayment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaystackPayment)
  @nestAccessControl.UseRoles({
    resource: "PaystackPayment",
    action: "update",
    possession: "any",
  })
  async updatePaystackPayment(
    @graphql.Args() args: UpdatePaystackPaymentArgs
  ): Promise<PaystackPayment | null> {
    try {
      return await this.service.updatePaystackPayment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaystackPayment)
  @nestAccessControl.UseRoles({
    resource: "PaystackPayment",
    action: "delete",
    possession: "any",
  })
  async deletePaystackPayment(
    @graphql.Args() args: DeletePaystackPaymentArgs
  ): Promise<PaystackPayment | null> {
    try {
      return await this.service.deletePaystackPayment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
